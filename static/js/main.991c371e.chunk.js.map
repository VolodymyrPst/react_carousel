{"version":3,"sources":["components/Input.tsx","components/Carousel.tsx","App.tsx","index.tsx"],"names":["Input","labelFor","name","type","value","max","method","htmlFor","min","id","onChange","e","target","Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","changeState","interval","useRef","useState","translate","setTranslate","moveRight","Math","abs","length","buttonHandler","direction","useEffect","current","setInterval","clearInterval","className","style","width","transform","transition","map","img","index","src","alt","height","onClick","action","bool","App","state","stateHandler","setState","prevSate","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.991c371e.chunk.js","sourcesContent":["import React from 'react';\nimport { Value } from '../types/Values';\n\ntype Props = {\n  labelFor: string,\n  name: string,\n  value: string,\n  type: string,\n  max: string,\n  method: (value: Value) => void,\n};\n\nexport const Input: React.FC<Props> = ({\n  labelFor,\n  name,\n  type,\n  value,\n  max,\n  method,\n}) => {\n  return (\n    <>\n      <label htmlFor={labelFor}>{name}</label>\n      <input\n        min=\"0\"\n        max={max}\n        name={name}\n        type={type}\n        id={labelFor}\n        value={value}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          method({\n            value: e.target.value,\n            type: name,\n          });\n        }}\n      />\n    </>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Value } from '../types/Values';\nimport { Input } from './Input';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: string,\n  frameSize: string,\n  itemWidth:string,\n  animationDuration: string,\n  infinite: boolean,\n  changeState: (value: Value) => void,\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n  changeState,\n}) => {\n  const interval = useRef<NodeJS.Timeout | null>(null);\n  const [translate, setTranslate] = useState(0);\n\n  const moveRight = () => {\n    if (Math.abs(translate) < (images.length - +step) * +itemWidth) {\n      setTranslate(() => translate - +step * +itemWidth);\n    } else if (infinite) {\n      setTranslate(0);\n    }\n  };\n\n  const buttonHandler = (direction: string) => {\n    switch (direction) {\n      case 'Prev':\n        if (translate < 0) {\n          setTranslate(() => translate + +step * +itemWidth);\n        }\n\n        break;\n      case 'Next':\n        moveRight();\n\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    if (infinite) {\n      interval.current = setInterval(() => {\n        moveRight();\n      }, +animationDuration);\n    }\n\n    return () => {\n      if (interval.current) {\n        clearInterval(interval.current);\n      }\n    };\n  }, [translate]);\n\n  return (\n    <div className=\"Carousel\">\n      <div\n        className=\"Carousel__wrapper\"\n        style={{ width: `${+frameSize * +itemWidth}px` }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transform: `translateX(${translate}px)`,\n            transition: `transform ${(animationDuration)}ms`,\n          }}\n        >\n          {\n            images.map((img, index) => {\n              return (\n                <li>\n                  <img\n                    src={img}\n                    alt={`${index}`}\n                    key={img}\n                    className=\"Carousel__image\"\n                    style={{\n                      width: `${itemWidth}px`,\n                      height: `${itemWidth}px`,\n                    }}\n                  />\n                </li>\n              );\n            })\n          }\n        </ul>\n      </div>\n      <div className=\"Carousel__controls\">\n        <button\n          type=\"button\"\n          className={translate === 0 ? 'Carousel__end' : 'Carousel__btn'}\n          onClick={() => buttonHandler('Prev')}\n        >\n          Prev\n        </button>\n        <div className=\"Carousel__inputs\">\n          <form\n            action=\"\"\n            className=\"Carousel__form\"\n          >\n            <Input\n              labelFor=\"item-width\"\n              type=\"number\"\n              name=\"Item width\"\n              key=\"Item width\"\n              max=\"260\"\n              value={itemWidth}\n              method={changeState}\n            />\n\n            <Input\n              labelFor=\"frame-size\"\n              type=\"number\"\n              name=\"Frame size\"\n              key=\"Frame size\"\n              max=\"13\"\n              value={frameSize}\n              method={changeState}\n            />\n\n            <Input\n              labelFor=\"step\"\n              type=\"number\"\n              name=\"Step\"\n              key=\"Step\"\n              max=\"6\"\n              value={step}\n              method={changeState}\n            />\n\n            <Input\n              labelFor=\"animation-duration\"\n              type=\"number\"\n              name=\"Duration\"\n              key=\"Duration\"\n              max=\"10000\"\n              value={animationDuration}\n              method={changeState}\n            />\n\n            <label htmlFor=\"cyclic\">Infinite</label>\n            <input\n              id=\"cyclic\"\n              name=\"cyclic\"\n              type=\"checkbox\"\n              key=\"cyclic\"\n              onChange={() => changeState({\n                type: 'infinite',\n                bool: !infinite,\n              })}\n            />\n          </form>\n        </div>\n        <button\n          type=\"button\"\n          data-cy=\"next\"\n          className={Math.abs(translate) >= (images.length - +step) * +itemWidth\n            ? 'Carousel__end' : 'Carousel__btn'}\n          onClick={() => buttonHandler('Next')}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport { Value } from './types/Values';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: '130',\n    frameSize: '3',\n    step: '2',\n    animationDuration: '1000',\n    infinite: false,\n  };\n\n  stateHandler = (value: Value) => {\n    switch (value.type) {\n      case 'infinite':\n        this.setState(prevSate => ({\n          ...prevSate,\n          infinite: value.bool,\n        }));\n        break;\n      case 'Item width':\n        this.setState(prevSate => ({\n          ...prevSate,\n          itemWidth: value.value,\n        }));\n        break;\n      case 'Frame size':\n        this.setState(prevSate => ({\n          ...prevSate,\n          frameSize: value.value,\n        }));\n        break;\n      case 'Step':\n        this.setState(prevSate => ({\n          ...prevSate,\n          step: value.value,\n        }));\n        break;\n      case 'Duration':\n        this.setState(prevSate => ({\n          ...prevSate,\n          animationDuration: value.value,\n        }));\n        break;\n      default:\n        break;\n    }\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 data-cy=\"title\">\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n          changeState={this.stateHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}